
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  poste: 'poste',
  typeContrat: 'typeContrat',
  tauxSalaire: 'tauxSalaire',
  joursTravailles: 'joursTravailles',
  coordonneesBancaires: 'coordonneesBancaires',
  actif: 'actif',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayRunScalarFieldEnum = {
  id: 'id',
  periode: 'periode',
  type: 'type',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayslipScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payRunId: 'payRunId',
  brut: 'brut',
  deductions: 'deductions',
  net: 'net',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  payslipId: 'payslipId',
  montant: 'montant',
  mode: 'mode',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  nom: 'nom',
  poste: 'poste',
  coordonneesBancaires: 'coordonneesBancaires'
};

exports.Prisma.PayRunOrderByRelevanceFieldEnum = {
  type: 'type'
};
exports.TypeContrat = exports.$Enums.TypeContrat = {
  JOURNALIER: 'JOURNALIER',
  FIXE: 'FIXE',
  HONORAIRE: 'HONORAIRE'
};

exports.ModePaiement = exports.$Enums.ModePaiement = {
  ESPECES: 'ESPECES',
  VIREMENT_BANCAIRE: 'VIREMENT_BANCAIRE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  WAVE: 'WAVE'
};

exports.StatusPayRun = exports.$Enums.StatusPayRun = {
  BROUILLON: 'BROUILLON',
  APPROUVE: 'APPROUVE',
  CLOTURE: 'CLOTURE'
};

exports.StatusPayslip = exports.$Enums.StatusPayslip = {
  PAYE: 'PAYE',
  PARTIEL: 'PARTIEL',
  EN_ATTENTE: 'EN_ATTENTE'
};

exports.Prisma.ModelName = {
  Employee: 'Employee',
  PayRun: 'PayRun',
  Payslip: 'Payslip',
  Payment: 'Payment'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "tenantClient",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/zeynab/Bureau/REACT/gestionnaire_salaries/Back-end/src/generated/tenant",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/zeynab/Bureau/REACT/gestionnaire_salaries/Back-end/prisma/tenant-schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "tenant"
  ],
  "activeProvider": "mysql",
  "inlineDatasources": {
    "tenant": {
      "url": {
        "fromEnvVar": "TENANT_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Tenant schema for each enterprise DB\ngenerator tenantClient {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/tenant\"\n}\n\ndatasource tenant {\n  provider = \"mysql\"\n  url      = env(\"TENANT_DATABASE_URL\")\n}\n\nenum TypeContrat {\n  JOURNALIER\n  FIXE\n  HONORAIRE\n}\n\nenum ModePaiement {\n  ESPECES\n  VIREMENT_BANCAIRE\n  ORANGE_MONEY\n  WAVE\n}\n\nenum StatusPayRun {\n  BROUILLON\n  APPROUVE\n  CLOTURE\n}\n\nenum StatusPayslip {\n  PAYE\n  PARTIEL\n  EN_ATTENTE\n}\n\nmodel Employee {\n  id                   Int         @id @default(autoincrement())\n  nom                  String\n  poste                String\n  typeContrat          TypeContrat\n  tauxSalaire          Decimal\n  joursTravailles      Int? // for journalier\n  coordonneesBancaires String?\n  actif                Boolean     @default(true)\n  createdAt            DateTime    @default(now())\n  updatedAt            DateTime    @updatedAt\n\n  payslips Payslip[]\n}\n\nmodel PayRun {\n  id        Int          @id @default(autoincrement())\n  periode   DateTime\n  type      String // MENSUEL, HEBDOMADAIRE, JOURNALIER\n  status    StatusPayRun @default(BROUILLON)\n  createdAt DateTime     @default(now())\n  updatedAt DateTime     @updatedAt\n\n  payslips Payslip[]\n}\n\nmodel Payslip {\n  id         Int           @id @default(autoincrement())\n  employeeId Int\n  payRunId   Int\n  brut       Decimal\n  deductions Decimal       @default(0)\n  net        Decimal\n  status     StatusPayslip @default(EN_ATTENTE)\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  employee Employee  @relation(fields: [employeeId], references: [id])\n  payRun   PayRun    @relation(fields: [payRunId], references: [id])\n  payments Payment[]\n}\n\nmodel Payment {\n  id        Int          @id @default(autoincrement())\n  payslipId Int\n  montant   Decimal\n  mode      ModePaiement\n  date      DateTime     @default(now())\n  createdAt DateTime     @default(now())\n  updatedAt DateTime     @updatedAt\n\n  payslip Payslip @relation(fields: [payslipId], references: [id])\n}\n",
  "inlineSchemaHash": "ad33ac618ccb82d4bd5353969db7c55d0b7eeaf2b46bab867c6f6be1554e0b8d",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Employee\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"nom\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"poste\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"typeContrat\",\"kind\":\"enum\",\"type\":\"TypeContrat\"},{\"name\":\"tauxSalaire\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"joursTravailles\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"coordonneesBancaires\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actif\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payslips\",\"kind\":\"object\",\"type\":\"Payslip\",\"relationName\":\"EmployeeToPayslip\"}],\"dbName\":null},\"PayRun\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"periode\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"StatusPayRun\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payslips\",\"kind\":\"object\",\"type\":\"Payslip\",\"relationName\":\"PayRunToPayslip\"}],\"dbName\":null},\"Payslip\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"employeeId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payRunId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"brut\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"deductions\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"net\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"StatusPayslip\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"employee\",\"kind\":\"object\",\"type\":\"Employee\",\"relationName\":\"EmployeeToPayslip\"},{\"name\":\"payRun\",\"kind\":\"object\",\"type\":\"PayRun\",\"relationName\":\"PayRunToPayslip\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToPayslip\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payslipId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"montant\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"mode\",\"kind\":\"enum\",\"type\":\"ModePaiement\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payslip\",\"kind\":\"object\",\"type\":\"Payslip\",\"relationName\":\"PaymentToPayslip\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    TENANT_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['TENANT_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.TENANT_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

